/*
 * Copyright (c) 2024 Charly Delay <0xcharly>
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
//#include <behaviors/num_word.dtsi> // requires auto-layer module
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#ifdef CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
#endif

#include "zmk-helpers/helper.h"
#include "hrm.dtsi"

// Layers.
#define DVORAK 0
#define LAYER_LeftPinky 1
#define LAYER_LeftRingy 2
#define LAYER_LeftMiddy 3
#define LAYER_LeftIndex 4
#define LAYER_RightPinky 5
#define LAYER_RightRingy 6
#define LAYER_RightMiddy 7
#define LAYER_RightIndex 8
#define LOWER 9
#define UPPER 10
#define EXTEND 11
#define SYSTEM 12
#define MOUSE 13

// Custom keycodes.
#define LAUNCHER (LG(SPACE))
#define CTL_TAB (LC(TAB))
#define RCS_TAB (LC(LS(TAB)))

#define EXTPOW_TOG &ext_power EXT_POWER_TOGGLE_CMD
#define RGB_UG_TOG &rgb_ug RGB_TOG

/* Global settings */

#define QUICK_TAP_MS 175

// Adjust sticky-keys configuration.
&sk {
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Caps-word, num-word */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

// Adjust Caps Word configuration.
&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/* Custom behaviors */

// tap: copy | double-tap: cut
ZMK_TAP_DANCE(copy_cut,
    tapping-term-ms = <200>;
    bindings = <&kp LG(C)>, <&kp LG(X)>;
)

// tap: paste | double-tap: paste w/o styles
ZMK_TAP_DANCE(styled_paste,
    tapping-term-ms = <200>;
    bindings = <&kp LG(V)>, <&kp LG(LS(V))>;
)

ZMK_CONDITIONAL_LAYER(sys, LOWER UPPER, EXTEND)  // LOWER + UPPER -> EXTEND

/ {
  // Macros configuration, specifically character sequences.
  macros {
    // Right arrow macro: ->
    rarrow: right_arrow {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp MINUS &kp GT>;
    };

    // Fat right arrow macro: =>
    frarrow: fat_right_arrow {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp EQUAL &kp GT>;
    };

    // Double shift.
    sshift: double_shift {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_release &kp LSHFT>
          , <&macro_press &kp LSHFT>
          , <&macro_release &kp LSHFT>
          ;
    };

    // ^bh: TMUX Space 0.
    tmux_0: tmux_space_0 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp H>
          ;
    };

    // ^bj: TMUX Space 1.
    tmux_1: tmux_space_1 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp J>
          ;
    };

    // ^bk: TMUX Space 2.
    tmux_2: tmux_space_2 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp K>
          ;
    };

    // ^bl: TMUX Space 3.
    tmux_3: tmux_space_3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp L>
          ;
    };
  };
};

/ {
  /**
   * 34-key keymap, using a Dvorak base layer.
   */
  keymap {
    compatible = "zmk,keymap";

    /** Traditional Dvorak layout. */
    dvorak {
      bindings = <
   /* ╭──────────────────────────────────────────────────────────────────────╮ ╭─────────────────────────────────────────────────────────────────────────╮ */
        &kp APOS      &kp COMMA     &kp DOT       &kp P         &kp Y            &kp F         &kp G        &kp C          &kp R          &kp L
        &LeftPinky(A) &LeftRingy(O) &LeftMiddy(E) &LeftIndex(U) &kp I            &kp D         &kp H        &RightMiddy(T) &RightRingy(N) &RightPinky(S)
        &none         &kp Q         &kp J         &kp K         &kp X            &kp B         &kp M        &kp W          &kp V          &kp Z
   /* ╰──────────────────────────────────────────────────────────────────────┤ ├─────────────────────────────────────────────────────────────────────────╯ */
                                    &mo LOWER     &kp SPACE                                    &smart_shft  &mo UPPER
   /*                             ╰──────────────────────────────────────────╯ ╰──────────────────────────────────────────╯                                */
      >;
    };

    layer_LeftPinky {
      bindings = <
        &left_pinky_tap APOS         &left_pinky_tap COMMA        &left_pinky_tap DOT          &left_pinky_tap P            &left_pinky_tap Y                           &trans               &trans               &trans               &trans               &trans
        &left_pinky_tap A            &none                        &LeftPinkyRingy              &LeftPinkyMiddy              &LeftPinkyIndex                             &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
        &trans                       &left_pinky_tap Q            &left_pinky_tap J            &left_pinky_tap K            &left_pinky_tap X                           &trans               &trans               &trans               &trans               &trans
                                                                                               &trans                       &trans                                      &trans               &trans
      >;
    };

    layer_LeftRingy {
      bindings = <
        &left_ringy_tap APOS         &left_ringy_tap COMMA        &left_ringy_tap DOT          &left_ringy_tap P            &left_ringy_tap Y                           &trans               &trans               &trans               &trans               &trans
        &left_ringy_tap A            &LeftRingyPinky              &none                        &LeftRingyMiddy              &LeftRingyIndex                             &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
        &trans                       &left_ringy_tap Q            &left_ringy_tap J            &left_ringy_tap K            &left_ringy_tap X                           &trans               &trans               &trans               &trans               &trans
                                                                                               &trans                       &trans                                      &trans               &trans
      >;
    };

    layer_LeftMiddy {
      bindings = <
        &left_middy_tap APOS         &left_middy_tap COMMA        &left_middy_tap DOT          &left_middy_tap P            &left_middy_tap Y                           &trans               &trans               &trans               &trans               &trans
        &left_middy_tap A            &LeftMiddyPinky              &LeftMiddyRingy              &none                        &LeftMiddyIndex                             &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
        &trans                       &left_middy_tap Q            &left_middy_tap J            &left_middy_tap K            &left_middy_tap X                           &trans               &trans               &trans               &trans               &trans
                                                                                               &trans                       &trans                                      &trans               &trans
      >;
    };

    layer_LeftIndex {
      bindings = <
        &left_index_tap APOS         &left_index_tap COMMA        &left_index_tap DOT          &left_index_tap P            &left_index_tap Y                           &trans               &trans               &trans               &trans               &trans
        &left_index_tap A            &LeftIndexPinky              &LeftIndexRingy              &LeftIndexMiddy              &none                                       &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
        &trans                       &left_index_tap Q            &left_index_tap J            &left_index_tap K            &left_index_tap X                           &trans               &trans               &trans               &trans               &trans
                                                                                               &trans                       &trans                                      &trans               &trans
      >;
    };

    layer_RightPinky {
      bindings = <
        &trans  &trans              &trans              &trans              &trans                            &right_pinky_tap F            &right_pinky_tap G            &right_pinky_tap C            &right_pinky_tap R            &right_pinky_tap L
        &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY                &RightPinkyIndex              &RightPinkyMiddy              &RightPinkyRingy              &none                         &right_pinky_tap S
        &trans  &trans              &trans              &trans              &trans                            &right_pinky_tap B            &right_pinky_tap M            &right_pinky_tap W            &right_pinky_tap V            &right_pinky_tap Z
                                                        &trans              &trans                            &trans                        &trans
      >;
    };

    layer_RightRingy {
      bindings = <
        &trans  &trans              &trans              &trans              &trans                            &right_ringy_tap F            &right_ringy_tap G            &right_ringy_tap C            &right_ringy_tap R            &right_ringy_tap L
        &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY                &RightRingyIndex              &RightRingyMiddy              &none                         &RightRingyPinky              &right_ringy_tap S
        &trans  &trans              &trans              &trans              &trans                            &right_ringy_tap B            &right_ringy_tap M            &right_ringy_tap W            &right_ringy_tap V            &right_pinky_tap Z
                                                        &trans              &trans                            &trans                        &trans
      >;
    };

    layer_RightMiddy {
      bindings = <
        &trans  &trans              &trans              &trans              &trans                            &right_middy_tap F            &right_middy_tap G            &right_middy_tap C            &right_middy_tap R            &right_middy_tap L
        &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY                &RightMiddyIndex              &none                         &RightMiddyRingy              &RightMiddyPinky              &right_middy_tap S
        &trans  &trans              &trans              &trans              &trans                            &right_middy_tap B            &right_middy_tap M            &right_middy_tap W            &right_middy_tap V            &right_pinky_tap Z
                                                        &trans              &trans                            &trans                        &trans
      >;
    };

    layer_RightIndex {
      bindings = <
        &trans  &trans              &trans              &trans              &trans                            &right_index_tap F            &right_index_tap G            &right_index_tap C            &right_index_tap R            &right_index_tap L
        &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY                &none                         &RightIndexMiddy              &RightIndexRingy              &RightIndexPinky              &right_index_tap S
        &trans  &trans              &trans              &trans              &trans                            &right_index_tap B            &right_index_tap M            &right_index_tap W            &right_index_tap V            &right_pinky_tap Z
                                                        &trans              &trans                            &trans                        &trans
      >;
    };

    /**
     * Lower layer. Left thumb down.
     *
     * Navigation and symbols.
     *
     *   - Primary hand (left):
     *     - Home-row sticky mods.
     *     - Direct access to desktop shortcuts.
     *   - Secondary hand (right):
     *     - Inverted T arrow cluster.
     *     - Parenthesis brackets.
     *     - Semi-colon for synergy with parenthesis and alt mod.
     */
    lower {
      bindings = <
   /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
        &kp LA(N1)   &kp LA(N2)   &kp LA(N3)   &kp LA(N4)   &kp LA(N5)       &kp DEL      &kp LS(TAB)  &kp UP       &kp BSPC     &kp TAB
        &sk LALT     &sk LGUI     &sk LCTRL    &sk LSHIFT   &kp LAUNCHER     &none        &kp LEFT     &kp DOWN     &kp RIGHT    &kp ENTER
        &none        &kp RCS_TAB  &copy_cut    &kp CTL_TAB  &styled_paste    &none        &kp LPAR     &kp SEMI     &kp RPAR     &none
   /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                  &trans /*↓*/ &none                                      &trans       &trans
   /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

    /**
     * Upper layer. Right thumb down.
     *
     * Symbols.
     *
     *   - Primary hand (right):
     *     - Underscore for symmetry with dash on other half.
     *     - Caret and dollar for Vi-motions.
     *     - Square and curly brackets.
     *     - Double quotes for modal editors registry.
     *   - Secondary hand (left):
     *     - Most common operators.
     *     - Hash and exclamation mark for Gmail shortcuts, and with synergy with right-side brackets.
     *     - Modal editors escape+colon roll for command mode.
     */
    upper {
      bindings = <
   /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
        &kp TILDE    &kp HASH     &kp EXCL     &kp EQUAL    &kp PERCENT      &none        &kp CARET    &kp QMARK    &kp DOLLAR   &kp BSLH
        &kp GRAVE    &kp ESCAPE   &kp MINUS    &kp COLON    &sshift          &none        &kp LBRC     &kp UNDER    &kp RBRC     &kp AT
        &none        &kp PLUS     &kp ASTERISK &kp SLASH    &none            &none        &kp LBKT     &kp DQT      &kp RBKT     &none
   /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                  &trans       &trans                                     &none        &trans /*↓*/
   /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

    /**
     * Extend layer. Classic tri-layer activated from both lower and upper layers.
     *
     * Numbers and symbols.
     *
     *   - Optimized numrow, and balanced operators.
     *   - Tilde and forward-slash synergy for paths.
     *   - Direct access to extended desktop shortcuts.
     */
    extend {
      bindings = <
   /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
        &kp LA(N6)   &kp LA(N7)   &kp LA(N8)   &kp LA(N9)   &kp LA(N0)       &none        &tmux_0      &tmux_1      &tmux_2      &tmux_3
        &kp N7       &kp N5       &kp N1       &kp N3       &none            &frarrow     &kp N2       &kp N0       &kp N4       &kp N6
        &none        &kp LT       &kp AMPS     &kp N9       &none            &rarrow      &kp N8       &kp PIPE     &kp GT       &none
   /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                  &trans /*↓*/ &none                                      &none        &trans /*↓*/
   /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

   /**
    * System layer for hardware controls.
    *
    * Available as a sticky-layer with a hard-to-mistap thumb cluster tap dance.
    *
    *   - Bluetooth channels.
    *   - Reset/bootloader.
    *   - Base layers.
    *   - Ext power/RGB.
    */
    system {
      bindings = <
   /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
#ifdef CONFIG_WIRELESS
        EXTPOW_TOG   &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 EXTPOW_TOG
        RGB_UG_TOG   &none        &none        &none        &bt BT_CLR       &bt BT_CLR   &none        &none        &none        RGB_UG_TOG
        &none        &sys_reset   &bt BT_PRV   &bt BT_NXT   &bootloader      &bootloader  &bt BT_NXT   &bt BT_PRV   &sys_reset   &none
#else
        EXTPOW_TOG   &none        &none        &none        &none            &none        &none        &none        &none        EXTPOW_TOG
        RGB_UG_TOG   &none        &none        &none        &none            &none        &none        &none        &none        RGB_UG_TOG
        &none        &sys_reset   &none        &none        &bootloader      &bootloader  &none        &none        &sys_reset   &none
#endif  // CONFIG_WIRELESS
   /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                  &none        &none                                      &none        &none
   /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };
  };
};
