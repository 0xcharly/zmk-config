/*
 * Copyright (c) 2024 Charly Delay <0xcharly>
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires auto-layer module
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#ifdef CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/german.dtsi"

// Layers.
#define DVORAK 0
#define LOWER 1
#define UPPER 2
#define EXTEND 3
#define SYSTEM 4
#define MOUSE 5

// Custom keycodes.
#define CANCEL &kp K_CANCEL   // cancel caps-word, num-word and smart-mouse
#define LAUNCHER (LG(SPACE))
#define CTL_TAB (LC(TAB))
#define RCS_TAB (LC(LS(TAB)))

#define EXTPOW_TOG &ext_power EXT_POWER_TOGGLE_CMD
#define RGB_UG_TOG &rgb_ug RGB_TOG

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

// Adjust sticky-keys configuration.
&sk {
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

// Adjust Caps Word configuration.
&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE MINUS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#ifndef LH2
    #define THUMBS LH1 LH0 RH0 RH1                                          // thumbs on 34 keys
#else
    #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                  // thumbs on 36+ keys
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// HRM combo hack - workaround for lack of tap-only combos (ZMK issue #544)
#define ZMK_COMBO_8(NAME, TAP, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE, HOLD, SIDE) \
    MAKE_HRM(hm_combo_ ## NAME, &kp, TAP, SIDE THUMBS) \
    ZMK_COMBO_6(NAME, &hm_combo_ ## NAME HOLD 0, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE)

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi"  // must be sourced after HRM-combo hack

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

/* Custom behaviors */

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_HOLD_TAP(lt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

// tap: copy | double-tap: cut
ZMK_TAP_DANCE(copy_cut,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

ZMK_CONDITIONAL_LAYER(sys, LOWER UPPER, EXTEND)  // LOWER + UPPER -> EXTEND

/ {
  // Macros configuration, specifically character sequences.
  macros {
    // Right arrow macro: ->
    rarrow: right_arrow {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp MINUS &kp GT>;
    };

    // Fat right arrow macro: =>
    frarrow: fat_right_arrow {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp EQUAL &kp GT>;
    };

    // Dead key acute.
    dk_acute: dead_key_ecute {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LALT>
          , <&macro_tap &kp E>
          , <&macro_release &kp LALT>
          ;
    };

    // Dead key grave.
    dk_grave: dead_key_grave {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LALT>
          , <&macro_tap &kp GRAVE>
          , <&macro_release &kp LALT>
          ;
    };

    // Dead key circumflex.
    dk_circ: dead_key_circumflex {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LALT>
          , <&macro_tap &kp I>
          , <&macro_release &kp LALT>
          ;
    };

    // Dead key acute.
    dk_trema: dead_key_trema {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LALT>
          , <&macro_tap &kp U>
          , <&macro_release &kp LALT>
          ;
    };

    // Double shift.
    sshift: double_shift {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_release &kp LSHFT>
          , <&macro_press &kp LSHFT>
          , <&macro_release &kp LSHFT>
          ;
    };

    // ^bh: TMUX Space 0.
    tmux_0: tmux_space_0 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp H>
          ;
    };

    // ^bj: TMUX Space 1.
    tmux_1: tmux_space_1 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp J>
          ;
    };

    // ^bk: TMUX Space 2.
    tmux_2: tmux_space_2 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp K>
          ;
    };

    // ^bl: TMUX Space 3.
    tmux_3: tmux_space_3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
          , <&macro_pause_for_release>
          , <&macro_tap &kp L>
          ;
    };
  };
};

/ {
  /**
   * 34-key keymap, using a Dvorak base layer.
   */
  keymap {
    compatible = "zmk,keymap";

    /** Traditional Dvorak layout. */
    dvorak {
      bindings = <
  /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
       &kp APOS     &kp COMMA    &kp DOT      &kp P        &kp Y            &kp F        &kp G        &kp C        &kp R        &kp L
       &hml LALT A  &hml LGUI O  &hml LCTRL E &hml LSHFT U &kp I            &kp D        &kp H        &hmr LCTRL T &hmr LGUI N  &hmr LALT S
       &none        &kp Q        &kp J        &kp K        &kp X            &kp B        &kp M        &kp W        &kp V        &kp Z
  /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                 &mo LOWER    &kp SPACE                                  &smart_shft  &mo UPPER
  /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

    /**
     * Lower layer. Left thumb down.
     *
     * Navigation and symbols.
     *
     *   - Primary hand (left):
     *     - Home-row sticky mods.
     *     - Direct access to desktop shortcuts.
     *   - Secondary hand (right):
     *     - Inverted T arrow cluster.
     *     - Parenthesis brackets.
     *     - Semi-colon for synergy with parenthesis and alt mod.
     */
    lower {
      bindings = <
  /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
       &kp LA(N1)   &kp LA(N2)   &kp LA(N3)   &kp LA(N4)   &kp LA(N5)       &kp DEL      &kp LS(TAB)  &kp UP       &kp BSPC     &kp TAB
       &sk LALT     &sk LGUI     &sk LCTRL    &sk LSHIFT   &kp LAUNCHER     &none        &kp LEFT     &kp DOWN     &kp RIGHT    &kp ENTER
       &kp LG(X)    &kp RCS_TAB  &kp LG(C)    &kp CTL_TAB  &kp LG(V)        &none        &kp LPAR     &kp SEMI     &kp RPAR     &none
  /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                 &trans /*↓*/ &none                                      &trans       &trans
  /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

    /**
     * Upper layer. Right thumb down.
     *
     * Symbols.
     *
     *   - Primary hand (right):
     *     - Underscore for symmetry with dash on other half.
     *     - Caret and dollar for Vi-motions.
     *     - Square and curly brackets.
     *     - Double quotes for modal editors registry.
     *   - Secondary hand (left):
     *     - Most common operators.
     *     - Hash and exclamation mark for Gmail shortcuts, and with synergy with right-side brackets.
     *     - Modal editors escape+colon roll for command mode.
     */
    upper {
      bindings = <
  /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
       &kp PERCENT  &kp HASH     &kp EXCL     &kp EQUAL    &none            &none        &kp CARET    &kp QMARK    &kp DOLLAR   &kp BSLH
       &kp GRAVE    &kp ESCAPE   &kp MINUS    &kp COLON    &sshift          &none        &kp LBRC     &kp UNDER    &kp RBRC     &kp AT
       &kp TILDE    &kp PLUS     &kp ASTERISK &kp SLASH    &none            &none        &kp LBKT     &kp DQT      &kp RBKT     &none
  /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                 &trans       &trans                                     &none        &trans /*↓*/
  /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

    /**
     * Extend layer. Classic tri-layer activated from both lower and upper layers.
     *
     * Numbers and symbols.
     *
     *   - Optimized numrow, and balanced operators.
     *   - Tilde and forward-slash synergy for paths.
     *   - Direct access to extended desktop shortcuts.
     */
    extend {
      bindings = <
  /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
       &kp LA(N6)   &kp LA(N7)   &kp LA(N8)   &kp LA(N9)   &kp LA(N0)       &none        &tmux_0      &tmux_1      &tmux_2      &tmux_3
       &kp N7       &kp N5       &kp N1       &kp N3       &none            &none        &kp N2       &kp N0       &kp N4       &kp N6
       &rarrow      &kp LT       &kp AMPS     &kp N9       &none            &none        &kp N8       &kp PIPE     &kp GT       &frarrow
  /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                 &trans /*↓*/ &none                                      &none        &trans /*↓*/
  /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };

   /**
    * System layer for hardware controls.
    *
    * Available as a sticky-layer with a hard-to-mistap thumb cluster tap dance.
    *
    *   - Bluetooth channels.
    *   - Reset/bootloader.
    *   - Base layers.
    *   - Ext power/RGB.
    */
    system {
      bindings = <
  /* ╭──────────────────────────────────────────────────────────────────╮ ╭──────────────────────────────────────────────────────────────────╮ */
       EXTPOW_TOG   &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 EXTPOW_TOG
       RGB_UG_TOG   &none        &none        &none        &bt BT_CLR       &bt BT_CLR   &none        &none        &none        RGB_UG_TOG
       &none        &sys_reset   &bt BT_PRV   &bt BT_NXT   &bootloader      &bootloader  &bt BT_NXT   &bt BT_PRV   &sys_reset   &none
  /* ╰──────────────────────────────────────────────────────────────────┤ ├──────────────────────────────────────────────────────────────────╯ */
                                 &none        &none                                      &none        &none
  /*                           ╰────────────────────────────────────────╯ ╰────────────────────────────────────────╯                           */
      >;
    };
  };
};
